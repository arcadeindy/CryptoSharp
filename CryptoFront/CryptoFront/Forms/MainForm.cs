using DevExpress.XtraEditors;
using FastColoredTextBoxNS;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using RestSharp;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Net;
using System.Net.Cache;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using System.Windows.Forms;
using CryptoCore.Classes;
using DevExpress.XtraBars.Docking;
using DevExpress;
using TALibraryInCSharp;
using DevExpress.XtraCharts;
using CryptoFront.Forms;
using CryptoFront.Classes;
using CSScriptLibrary;
using System.Threading;
using DevExpress.XtraTreeList;
using System.Data.SQLite;
using System.Web;

namespace CryptoFront
{
    public partial class MainForm : XtraForm
    {


        List<MarketInfo> AllMarkets = null;
        MarketInfo ActiveMarket;
        StrategyInfo ActiveStrategy;
        List<CandleInfo> CurrentCandles = null;

        bool NO_INIT = false;


        public MainForm()
        {
            InitializeComponent();


            

            if (!NO_INIT)
            {
                FirstInit();

            }


            if (Globals.CurrentUser != null)
            {
                barBtnUser.Caption = "Logged in as: " + Globals.CurrentUser.Username;
            }


        }
        

        void FirstInit()
        {

            ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12 | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls;
            InitChartControl();

            barDateStart.EditValue = new DateTime(2019, 10, 06);
            barDateEnd.EditValue = new DateTime(2019, 11, 03);

            DockMarkets_CustomButtonClick(null, null);
            BarBtnLoadChart_ItemClick(null, null);

            RefreshStrategies();
        }

        string GenerateBarURL(DateTime start, DateTime end, string interval)
        {
            //https://localhost:5001/api/candles/BTCUSDT?start=2019-10-06&end=2019-11-03&interval=FifteenMinutes
            return "";
            
        }

        void RefreshStrategies()
        {
            


            var html = Globals.HTTPPost(Globals.API_ENDPOINT + "api/strategies", new Dictionary<string, string>(){
            {"action","get" },
            {"token",Globals.CurrentUser.GetToken() }}
            );

            List<StrategyInfo> r = JsonConvert.DeserializeObject<List<StrategyInfo>>(html);

            if (r == null)
            {
                XtraMessageBox.Show(html);
                return;
            }

            treeStrategies.ClearNodes();

            foreach (StrategyInfo si in r)
            {

                if (ActiveStrategy == null)
                {
                    ActivateStrategy(si);
                }

                var n = treeStrategies.Nodes.Add(new string[] { GetStrategyNodeString(si) });
                n.Tag = si;

                if (ActiveStrategy!=null && si.Id == ActiveStrategy.Id)
                {
                    treeStrategies.FocusedNode = n;
                    treeStrategies.SelectNode(n);
                }

            }
        }

        void InitChartControl()
        {
            var Diagram = (XYDiagram)this.chartControl1.Diagram;
            var AxisX = Diagram.AxisX;
            var AxisY = Diagram.AxisY; // SecondaryAxesY[Diagram.SecondaryAxesY.Add(new SecondaryAxisY())];

            AxisY.WholeRange.AlwaysShowZeroLevel = false;
            AxisY.WholeRange.Auto = true;
            AxisY.VisualRange.Auto = true;

            Diagram.DependentAxesYRange = DevExpress.Utils.DefaultBoolean.True;
            //AxisX.DateTimeScaleOptions.WorkdaysOnly = false;
            //AxisX.NumericScaleOptions.AutoGrid = false;
            //AxisX.NumericScaleOptions.GridSpacing = 1;



            AxisX.DateTimeScaleOptions.MeasureUnit = DateTimeMeasureUnit.Minute;
            AxisX.DateTimeScaleOptions.GridAlignment = DateTimeGridAlignment.Day;


            AxisX.Label.ResolveOverlappingOptions.AllowRotate = false;
            AxisX.Label.ResolveOverlappingOptions.AllowStagger = false;
            AxisX.LabelVisibilityMode = DevExpress.XtraCharts.AxisLabelVisibilityMode.AutoGeneratedAndCustom;
            AxisX.StickToEnd = true;
            AxisX.VisualRange.Auto = false;
            AxisX.VisualRange.AutoSideMargins = false;

            AxisX.VisualRange.SideMarginsValue = 5D;
            AxisX.WholeRange.AutoSideMargins = false;
            AxisX.WholeRange.SideMarginsValue = 5D;
            AxisY.Alignment = DevExpress.XtraCharts.AxisAlignment.Far;


            
        }

        DateTime LastTextChange = DateTime.MinValue;
        private void fastColoredTextBox1_TextChanged(object sender, TextChangedEventArgs e)
        {

            

            

        }


        private void CSharpSyntaxHighlight(TextChangedEventArgs e)
        {

            TextStyle BlueStyle = new TextStyle(Brushes.Blue, null, FontStyle.Regular);
            TextStyle BoldStyle = new TextStyle(null, null, FontStyle.Bold | FontStyle.Underline);
            TextStyle GrayStyle = new TextStyle(Brushes.Gray, null, FontStyle.Regular);
            TextStyle MagentaStyle = new TextStyle(Brushes.Magenta, null, FontStyle.Regular);
            TextStyle GreenStyle = new TextStyle(Brushes.Green, null, FontStyle.Italic);
            TextStyle BrownStyle = new TextStyle(Brushes.Brown, null, FontStyle.Italic);
            TextStyle MaroonStyle = new TextStyle(Brushes.Maroon, null, FontStyle.Regular);
            MarkerStyle SameWordsStyle = new MarkerStyle(new SolidBrush(Color.FromArgb(40, Color.Gray)));


            fctb.LeftBracket = '(';
            fctb.RightBracket = ')';
            fctb.LeftBracket2 = '\x0';
            fctb.RightBracket2 = '\x0';
            //clear style of changed range
            e.ChangedRange.ClearStyle(BlueStyle, BoldStyle, GrayStyle, MagentaStyle, GreenStyle, BrownStyle);

            //string highlighting
            e.ChangedRange.SetStyle(BrownStyle, @"""""|@""""|''|@"".*?""|(?<!@)(?<range>"".*?[^\\]"")|'.*?[^\\]'");
            //comment highlighting
            e.ChangedRange.SetStyle(GreenStyle, @"//.*$", RegexOptions.Multiline);
            e.ChangedRange.SetStyle(GreenStyle, @"(/\*.*?\*/)|(/\*.*)", RegexOptions.Singleline);
            e.ChangedRange.SetStyle(GreenStyle, @"(/\*.*?\*/)|(.*\*/)", RegexOptions.Singleline | RegexOptions.RightToLeft);
            //number highlighting
            e.ChangedRange.SetStyle(MagentaStyle, @"\b\d+[\.]?\d*([eE]\-?\d+)?[lLdDfF]?\b|\b0x[a-fA-F\d]+\b");
            //attribute highlighting
            e.ChangedRange.SetStyle(GrayStyle, @"^\s*(?<range>\[.+?\])\s*$", RegexOptions.Multiline);
            //class name highlighting
            e.ChangedRange.SetStyle(BoldStyle, @"\b(class|struct|enum|interface)\s+(?<range>\w+?)\b");
            //keyword highlighting
            e.ChangedRange.SetStyle(BlueStyle, @"\b(abstract|as|base|bool|break|byte|case|catch|char|checked|class|const|continue|decimal|default|delegate|do|double|else|enum|event|explicit|extern|false|finally|fixed|float|for|foreach|goto|if|implicit|in|int|interface|internal|is|lock|long|namespace|new|null|object|operator|out|override|params|private|protected|public|readonly|ref|return|sbyte|sealed|short|sizeof|stackalloc|static|string|struct|switch|this|throw|true|try|typeof|uint|ulong|unchecked|unsafe|ushort|using|virtual|void|volatile|while|add|alias|ascending|descending|dynamic|from|get|global|group|into|join|let|orderby|partial|remove|select|set|value|var|where|yield)\b|#region\b|#endregion\b");

            //clear folding markers
            e.ChangedRange.ClearFoldingMarkers();

            //set folding markers
            e.ChangedRange.SetFoldingMarkers("{", "}");//allow to collapse brackets block
            e.ChangedRange.SetFoldingMarkers(@"#region\b", @"#endregion\b");//allow to collapse #region blocks
            e.ChangedRange.SetFoldingMarkers(@"/\*", @"\*/");//allow to collapse comment block
        }



        void LoadChart(string ChartName, List<CandleInfo> candles)
        {
            var dt = new DataTable("data");

            dt.Columns.Add("Date", typeof(DateTime));
            dt.Columns.Add("Open", typeof(double));
            dt.Columns.Add("High", typeof(double));
            dt.Columns.Add("Low", typeof(double));
            dt.Columns.Add("Close", typeof(double));


            DataRow row = null;
            foreach (CandleInfo item in candles)
            {
                row = dt.NewRow();
                row["Date"] = item.OpenTime;

                row["Open"] = item.Low;
                row["High"] = item.High;
                row["Low"] = item.Open;
                row["Close"] = item.Close;

                dt.Rows.Add(row);
            }


            chartControl1.Series.Clear();
            var ser = new DevExpress.XtraCharts.Series(ChartName, DevExpress.XtraCharts.ViewType.CandleStick);


            // Access the view-type-specific options of the series. 
            CandleStickSeriesView myView = (CandleStickSeriesView)ser.View;

            myView.LineThickness = 1;
            myView.LevelLineLength = 1;

            // Specify the series reduction options. 
            myView.ReductionOptions.ColorMode = ReductionColorMode.OpenToCloseValue;
            myView.ReductionOptions.FillMode = CandleStickFillMode.FilledOnReduction;
            myView.ReductionOptions.Level = StockLevel.Close;
            myView.ReductionOptions.Visible = true;

            //var wat = ser.
            


            ser.ArgumentScaleType = ScaleType.DateTime;

            ser.DataSource = dt;

            ser.ArgumentDataMember = "Date";
            ser.ValueDataMembers[0] = "Open";
            ser.ValueDataMembers[1] = "High";
            ser.ValueDataMembers[2] = "Low";
            ser.ValueDataMembers[3] = "Close";

            chartControl1.Series.Add(ser);

            var Diagram = (XYDiagram)this.chartControl1.Diagram;
            var AxisX = Diagram.AxisX;

            AxisX.VisualRange.SetMinMaxValues((DateTime)AxisX.VisualRange.MinValue, (DateTime)AxisX.VisualRange.MaxValue);

            var AxisY = Diagram.AxisY;
            //AxisY.VisualRange.SetMinMaxValues(0, 99999999);

            ser.ArgumentScaleType = DevExpress.XtraCharts.ScaleType.DateTime;
            ser.CrosshairLabelPattern = "{A:MM/dd/yyyy HH:mm}\n\nHigh: {HV:0.00}\nLow:  {LV:0.00}\nOpen: {OV:0.00}\nClose: {CV:0.00}\n";


            RefreshIndicators();
        }


        
        private void RefreshMarketList()
        {
            ShowLoading();


            var html = Globals.HTTPGet(Globals.API_ENDPOINT + "api/markets?refresh=true");


            if (Globals.IsValidJson(html))
            {
                AllMarkets = JsonConvert.DeserializeObject<List<MarketInfo>>(html);

                if (AllMarkets == null || AllMarkets.Count == 0) return;



                if (ActiveMarket == null)
                {
                    ActiveMarket = AllMarkets[0]; // should be BTC-USDT
                }


                treeMarkets.BeginUpdate();

                treeMarkets.ClearNodes();

                foreach (var item in AllMarkets)
                {
                    

                    var n = treeMarkets.Nodes.Add(new string[] { GetMarketNodeString(item) });
                    n.Tag = item;


                    if (item.Symbol == ActiveMarket.Symbol)
                    {
                        treeMarkets.FocusedNode = n;
                    }
                }

                treeMarkets.EndUpdate();
            }

            CloseLoading();
        }

        

        private string GetStrategyNodeString(StrategyInfo si)
        {
            var text = "";
            if (ActiveStrategy !=null && ActiveStrategy.Id == si.Id)
            {
                text = "<b>" + si.Name + "</b>";
            }
            else
            {
                text = "" + si.Name + "";
            }

            return text;
        }

        private string GetMarketNodeString(MarketInfo market)
        {
            var text = "";
            if (ActiveMarket !=null &&  market.Symbol == ActiveMarket.Symbol)
            {
                text = "<b>" + market.Symbol + "</b>";
            }
            else
            {
                text = "" + market.Symbol + "";
            }

            text += " (" + market.LastPrice.ToString() + ")";

            return text;
        }

        private void DockMarkets_CustomButtonClick(object sender, DevExpress.XtraBars.Docking2010.ButtonEventArgs e)
        {
            RefreshMarketList();
        }

        private void DockChart_CustomButtonClick(object sender, DevExpress.XtraBars.Docking2010.ButtonEventArgs e)
        {
            var btn = (CustomHeaderButton)e.Button;

            if (btn.Caption == "Indicators")
            {
                var f = new IndicatorsForm();
                f.ShowDialog();

                RefreshIndicators();
            }
            else if (btn.Caption == "Hide Candles")
            {
                // hide
                if (btn.Checked == false)
                {
                    
                }

                chartControl1.Series[0].Visible = !btn.Checked;
            }
            else
            {

            }
        }


        private void RefreshIndicators()
        {


            // update indicators

            // delete ALL series
            while (chartControl1.Series.Count > 1)
            {
                chartControl1.Series.RemoveAt(chartControl1.Series.Count - 1);

            }

            XYDiagram diagram = (XYDiagram)chartControl1.Diagram;

            if (diagram == null)
            {
                return;
            }

            diagram.SecondaryAxesY.Clear();

            diagram.Panes.Clear();

            // let's put the series again
            var currIndicator = 0;
            foreach (var indicator in GlobalHelper.ChartIndicators)
            {

                if (!indicator.Visible) continue;

                currIndicator++;

                int valueType = 0;

                // lhoc
                if (indicator.InputValue == "Open")
                    valueType = 0;
                else if (indicator.InputValue == "High")
                    valueType = 1;
                else if (indicator.InputValue == "Low")
                    valueType = 2;
                else
                    valueType = 3;


                double[] input = new double[chartControl1.Series[0].Points.Count];

                double[] highs = new double[chartControl1.Series[0].Points.Count];
                double[] lows = new double[chartControl1.Series[0].Points.Count];
                double[] closes = new double[chartControl1.Series[0].Points.Count];
                double[] opens = new double[chartControl1.Series[0].Points.Count];


                DateTime[] dates = new DateTime[chartControl1.Series[0].Points.Count];

                var count = 0;
                foreach (var item in chartControl1.Series[0].Points)
                {
                    var sr = (SeriesPoint)item;
                    dates[count] = sr.DateTimeArgument;

                    input[count] = sr[valueType]; // ohlc

                    highs[count] = sr[1];
                    lows[count] = sr[2];
                    closes[count] = sr[3];
                    opens[count] = sr[0];

                    count++;
                }


                int outBegIdx = 0;

                int outNbElement = 0;



                var period = indicator.Period;
                if (indicator.Name == Globals.IND_SimpleMovingAverage)
                {
                    double[] output = new double[input.Length];

                    output = CryptoCore.Scripting.Indicators.SimpleMovingAverage(period, input);

                    //var res = TACore.MovingAverage(0, input.Length - 1, input, period, TACore.MAType.Sma, ref outBegIdx, ref outNbElement, output);

                    AddLineSeries(indicator, output, dates);

                }
                else if (indicator.Name == Globals.IND_ExponentialMovingAverage)
                {
                    double[] output = new double[input.Length];

                    output = CryptoCore.Scripting.Indicators.ExponentialMovingAverage(period, input);

                    AddLineSeries(indicator, output, dates);
                }
                else if (indicator.Name == Globals.IND_ParabolicSAR)
                {
                    double[] output = new double[input.Length];

                    output = CryptoCore.Scripting.Indicators.ParabolicSAR(highs, lows);

                    AddLineSeries(indicator, output, dates);
                }
                else if (indicator.Name == Globals.IND_CCI)
                {
                    double[] output = new double[input.Length];

                    output = CryptoCore.Scripting.Indicators.CCI(period, highs, lows, closes);

                    XYDiagramPane secondPane = new XYDiagramPane("Pane" + currIndicator.ToString());
                    diagram.Panes.Add(secondPane);

                    var ser = AddLineSeries(indicator, output, dates, indicator.Name, indicator.LineColor, secondPane);

                    XYDiagramSeriesViewBase view = (XYDiagramSeriesViewBase)ser.View;

                    view.AxisY = diagram.SecondaryAxesY[diagram.SecondaryAxesY.Add(new SecondaryAxisY(currIndicator.ToString()))];
                    view.AxisY.Alignment = AxisAlignment.Far;
                }
                else if (indicator.Name == Globals.IND_ATR)
                {
                    double[] output = new double[input.Length];

                    output = CryptoCore.Scripting.Indicators.ATR(period, highs, lows, closes);

                    XYDiagramPane secondPane = new XYDiagramPane("Pane" + currIndicator.ToString());
                    diagram.Panes.Add(secondPane);

                    var ser = AddLineSeries(indicator, output, dates, indicator.Name, indicator.LineColor, secondPane);

                    XYDiagramSeriesViewBase view = (XYDiagramSeriesViewBase)ser.View;

                    view.AxisY = diagram.SecondaryAxesY[diagram.SecondaryAxesY.Add(new SecondaryAxisY(currIndicator.ToString()))];
                    view.AxisY.Alignment = AxisAlignment.Far;
                }
                else if (indicator.Name == Globals.IND_ADX)
                {
                    double[] output = new double[input.Length];

                    output = CryptoCore.Scripting.Indicators.ADX(period, highs, lows, closes);

                    XYDiagramPane secondPane = new XYDiagramPane("Pane" + currIndicator.ToString());
                    diagram.Panes.Add(secondPane);

                    var ser = AddLineSeries(indicator, output, dates, indicator.Name, indicator.LineColor, secondPane);

                    XYDiagramSeriesViewBase view = (XYDiagramSeriesViewBase)ser.View;

                    view.AxisY = diagram.SecondaryAxesY[diagram.SecondaryAxesY.Add(new SecondaryAxisY(currIndicator.ToString()))];
                    view.AxisY.Alignment = AxisAlignment.Far;
                }
                else if (indicator.Name == Globals.IND_SD)
                {
                    double[] output = new double[input.Length];

                    output = CryptoCore.Scripting.Indicators.StandardDeviation(period, indicator.StdDev, input);

                    XYDiagramPane secondPane = new XYDiagramPane("Pane" + currIndicator.ToString());
                    diagram.Panes.Add(secondPane);

                    var ser = AddLineSeries(indicator, output, dates, indicator.Name, indicator.LineColor, secondPane);

                    XYDiagramSeriesViewBase view = (XYDiagramSeriesViewBase)ser.View;

                    view.AxisY = diagram.SecondaryAxesY[diagram.SecondaryAxesY.Add(new SecondaryAxisY(currIndicator.ToString()))];
                    view.AxisY.Alignment = AxisAlignment.Far;
                }
                else if (indicator.Name == Globals.IND_WilliamsR)
                {
                    double[] output = new double[input.Length];

                    output = CryptoCore.Scripting.Indicators.WilliamsR(period, highs, lows, closes);

                    XYDiagramPane secondPane = new XYDiagramPane("Pane" + currIndicator.ToString());
                    diagram.Panes.Add(secondPane);

                    var ser = AddLineSeries(indicator, output, dates, indicator.Name, indicator.LineColor, secondPane);

                    XYDiagramSeriesViewBase view = (XYDiagramSeriesViewBase)ser.View;

                    view.AxisY = diagram.SecondaryAxesY[diagram.SecondaryAxesY.Add(new SecondaryAxisY(currIndicator.ToString()))];
                    view.AxisY.Alignment = AxisAlignment.Far;

                }
                else if (indicator.Name == "Bollinger Bands")
                {
                    double[] bbdUpper = new double[input.Length];
                    double[] bbdMid = new double[input.Length];
                    double[] bbdLower = new double[input.Length];


                    //var res = TACore.Bbands(0, input.Length - 1, input, period, indicator.StdDev,indicator.StdDev,TACore.MAType.Sma, ref outBegIdx, ref outNbElement, bbdUpper, bbdMid, bbdLower);

                    var bbData = CryptoCore.Scripting.Indicators.BollingerBands(period, indicator.StdDev, input);

                    bbdUpper = bbData.Upper;
                    bbdMid = bbData.Middle;
                    bbdLower = bbData.Lower;

                    AddLineSeries(indicator, bbdUpper, dates, "Bollinger Bands Upper");
                    AddLineSeries(indicator, bbdMid, dates, "Bollinger Bands Middle");
                    AddLineSeries(indicator, bbdLower, dates, "Bollinger Bands Lower");
                }
                else if (indicator.Name == "MACD")
                {
                    //var data = CryptoCore.Scripting.Indicators.MACD(indicator.FastPeriod, indicator.SlowPeriod, input);
                    //
                    //XYDiagramPane secondPane = new XYDiagramPane("Pane" + currIndicator.ToString());
                    //diagram.Panes.Add(secondPane);
                    //
                    //var ser1 = AddLineSeries(indicator, data.FastOutput, dates, "MACD Fast", indicator.FastColor, secondPane);
                    //var ser2 = AddLineSeries(indicator, data.SlowOutput, dates, "MACD Slow", indicator.SlowColor, secondPane);
                    //
                    //XYDiagramSeriesViewBase view = (XYDiagramSeriesViewBase)ser1.View;
                    //
                    //view.AxisY = diagram.SecondaryAxesY[diagram.SecondaryAxesY.Add(new SecondaryAxisY(currIndicator.ToString()))];
                    //view.AxisY.Alignment = AxisAlignment.Far;
                }
                else if (indicator.Name == Globals.IND_RSI)
                {

                    double[] output = new double[input.Length];

                    output = CryptoCore.Scripting.Indicators.RSI(indicator.Period, input);


                    XYDiagramPane secondPane = new XYDiagramPane("Pane" + currIndicator.ToString());
                    diagram.Panes.Add(secondPane);

                    var ser = AddLineSeries(indicator, output, dates, "RSI", indicator.LineColor, secondPane);

                    XYDiagramSeriesViewBase view = (XYDiagramSeriesViewBase)ser.View;

                    view.AxisY = diagram.SecondaryAxesY[diagram.SecondaryAxesY.Add(new SecondaryAxisY(currIndicator.ToString()))];
                    view.AxisY.Alignment = AxisAlignment.Far;



                    //secondPane.SizeMode = PaneSizeMode.UseWeight;
                    //pane.Weight = .5;
                    //view.AxisY.GridLines.Visible = true;
                    //view.AxisY.WholeRange.AlwaysShowZeroLevel = false;
                    //view.AxisY.VisualRange.Auto = true;
                    //view.AxisY.WholeRange.Auto = true;

                    //view.AxisY.WholeRange.Auto = false;
                    //view.AxisY.VisualRange.Auto = true;

                    /**/
                }
            }
        }

        private Series AddLineSeries(IndicatorInfo indicator, double[] points, DateTime[] dates, string customName = "", Color? lineColor = null, XYDiagramPane pane = null)
        {
            var Period = indicator.Period;
            var Count = points.Length;
            var Name = (customName != "") ? customName : indicator.Name;

            var viewType = ViewType.Line;

            if (indicator.Name == Globals.IND_ParabolicSAR)
            {
                viewType = ViewType.Point;
            }

            var ser = new DevExpress.XtraCharts.Series(Name + " (" + Period + ")", viewType);

            var dt = new DataTable("table");
            dt.Columns.Add("Date", typeof(DateTime));
            dt.Columns.Add("Value", typeof(double));

            DataRow row = null;
            for (int i = 0; i < Count; i++)
            {
                if (i < Period)
                {
                    continue;
                }
                row = dt.NewRow();
                row["Date"] = dates[i];
                row["Value"] = points[i];

                dt.Rows.Add(row);
            }

            ser.DataSource = dt;
            ser.ArgumentDataMember = "Date";
            ser.ValueDataMembers[0] = "Value";

            ser.View.Color = (lineColor!=null) ? (Color)lineColor : indicator.LineColor;

            
            if (indicator.Name == Globals.IND_ParabolicSAR)
            {
                ((PointSeriesView)ser.View).PointMarkerOptions.Size = 4;
            }
            

            ser.CrosshairLabelPattern = Name + " (" + Period + "): " + "{V1:0.00}";

            chartControl1.Series.Add(ser);

            if (pane != null)
            {
                XYDiagramSeriesViewBase temp = (XYDiagramSeriesViewBase)ser.View;
                temp.Pane = pane;
            }

            return ser;

        }





        private void MainForm_Load(object sender, EventArgs e)
        {
            
        }

    

        private void ShowLoading()
        {
            adornerUIManager1.ShowGuides = DevExpress.Utils.DefaultBoolean.True;
            splashManager.ShowWaitForm();

        }

        private void CloseLoading()
        {
            adornerUIManager1.ShowGuides = DevExpress.Utils.DefaultBoolean.False;
            splashManager.CloseWaitForm();
        }


        private void ExecuteWithLoading(Action act)
        {
            Thread t = new Thread(() =>
            {
                ShowLoading();
                act.Invoke();
                CloseLoading();

            });

            t.Start();
        }
        

        private string GetIntervalApiValue(string interval)
        {
            var dict = new Dictionary<string, string>();

            dict["5 Minutes"] = "FiveMinutes";
            dict["15 Minutes"] = "FifteenMinutes";
            dict["30 Minutes"] = "ThirtyMinutes";
            dict["1 Hour"] = "OneHour";
            dict["2 Hours"] = "TwoHour";
            dict["4 Hours"] = "FourHour";
            dict["1 Day"] = "OneDay";

            if (!dict.ContainsKey(interval))
            {
                return dict["15 Minutes"];
            }

            return dict[interval];

        }


        private void BarBtnLoadChart_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {

            if (ActiveMarket == null) return; // means we have not even initialized? Maybe no API server?

            InitChartControl();

            ShowLoading();

            var startDate = ((DateTime)barDateStart.EditValue).ToString("yyyy-MM-dd");
            var endDate = ((DateTime)barDateEnd.EditValue).ToString("yyyy-MM-dd");
            var interval = GetIntervalApiValue(barComboInterval.EditValue.ToString());
            var marketSymbol = ActiveMarket.Symbol.Replace("-", "").ToUpper();

            var url = Globals.API_ENDPOINT + "api/candles/" + marketSymbol + "?start=" + startDate  + "&end=" + endDate + "&interval=" + interval;

            CurrentCandles = null;

            int tries = 0;
            int MAX_TRIES = 100;

            var html = "";

            do
            {
                tries++;
                if (tries > 1)
                {
                    // 2nd time, let's have a small delay
                    Thread.Sleep(1000);
                }
                html = CryptoCore.Classes.Globals.HTTPGet(url);
            } while (html.Contains("working") && tries < MAX_TRIES);
            

            if (Globals.IsValidJson(html))
            {

                CurrentCandles = JsonConvert.DeserializeObject<List<CandleInfo>>(html);

                LoadChart(marketSymbol, CurrentCandles);
            }
            else
            {
                XtraMessageBox.Show("Error loading chart!");
            }




            CloseLoading();
        }

        private void BarBtnBacktest_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            if (CurrentCandles == null || CurrentCandles.Count < 50)
            {
                MessageBox.Show("Not enough chart data to run strategy.");
                return;
            }





            var temp = new Context(CurrentCandles);
            temp.ActiveStrategyOptions = Globals.ActiveStrategyOptions;
            if (!Globals.RunScript(fctb.Text, ref temp))
            {
                
                return;
            }

            orderControl1.treeOrders.ClearNodes();
            foreach (var pt in chartControl1.Series[0].Points)
            {
                var sr = (SeriesPoint)pt;

                sr.Annotations.Clear();

            }

            chartControl1.RefreshData();

                //var action = RequestData["action"];
                //var token = RequestData["token"];
                //var source = RequestData["source"];
                //var market = RequestData["market"];
                //var startS = RequestData["start"];
                //var endS = RequestData["end"];
                //var interval = RequestData["interval"];
                //var options = RequestData["options"];

                var startDate = ((DateTime)barDateStart.EditValue).ToString("yyyy-MM-dd");
            var endDate = ((DateTime)barDateEnd.EditValue).ToString("yyyy-MM-dd");
            var interval = GetIntervalApiValue(barComboInterval.EditValue.ToString());
            var marketSymbol = ActiveMarket.Symbol.Replace("-", "").ToUpper();

            
            ShowLoading();

            var html = Globals.HTTPPost(Globals.API_ENDPOINT + "api/backtest", new Dictionary<string, string>(){
            {"action","backtest" },
            {"token",Globals.CurrentUser.GetToken() },
            {"source",fctb.Text },
            {"market" , marketSymbol },
            {"start" , startDate },
            {"end" , endDate },
            {"interval" , interval },
            { "options",JsonConvert.SerializeObject(Globals.ActiveStrategyOptions) } }
            );


            CloseLoading();

            var ords = new List<OrderResultInfo>();
            try
            {
                ords = JsonConvert.DeserializeObject<List<OrderResultInfo>>(html);
            }
            catch
            {
                XtraMessageBox.Show(html);
                return;
            }

            /**/

            if (ords == null)
            {
                XtraMessageBox.Show(html);
                return;
            }


            orderControl1.treeOrders.BeginUpdate();

            foreach (var item in ords)
            {
                //var n = orderControl1.treeOrders.Nodes.Add(new string[] { item.Id, item.Time.ToString(), item.Type, item.OrderPrice.ToString(), "$ " + item.OrderAmountUSD.ToString(), item.ProfitLoss.ToString(),
                //    item.FinalBalance.ToString(), item.FinalEquity.ToString(), ""});
                var finalBalance = item.FinalBalance.ToString();
                var fEquity = item.FinalEquity.ToString() + "";
                var dtString = (item.Time != DateTime.MinValue) ? item.Time.ToString() : "";
                if (item.Type == "blank")
                {
                    orderControl1.treeOrders.Nodes.Add(new string[] { "" });
                    continue;
                }

                var tempPL = (item.ProfitLoss.ToString()!="0") ? "$ " + item.ProfitLoss.ToString() : "-";
                var tempfBal = (finalBalance!="0") ? "$ " + finalBalance : "-";
                var tempfEq = (fEquity != "0") ? "$ " + fEquity : "-";
                var tempOrdAmount = (item.Type!="blank2") ? "$ " + item.OrderAmountUSD.ToString() : "";
                var tempOrdPrice = (item.Type!="blank2") ? item.OrderPrice.ToString() : "";
                var tempType = item.Type;

                if (item.Type == "blank2")
                {
                    tempfEq = "";
                    tempType = "";
                }

                var n = orderControl1.treeOrders.Nodes.Add(new string[] { item.Id, dtString,tempType, tempOrdPrice, tempOrdAmount, tempPL,
            tempfBal,tempfEq,"",""});
                //n.Tag = item;
            }
            orderControl1.treeOrders.EndUpdate();
            

            

            




            var c = new Context(CurrentCandles);

            c.ActiveStrategyOptions = Globals.ActiveStrategyOptions;

            //c.Orders = ords;

            var startingBalance = c.ActiveStrategyOptions.BacktestStartingBalance;

            var originalBalance = startingBalance;

            var l = new List<CandleInfo>();

            /*

            foreach (var item in CurrentCandles)
            {
                l.Add(item);

                if (l.Count < 20) continue;

                c.RawCandles = l;

                if (!Globals.RunScript(fctb.Text, ref c))
                {
                    // cancel
                    return;
                }
            }*/



            foreach (var item in c.GetOpenOrders())
            {
                c.CloseOrder(item);
            }

            


            foreach (var pt in chartControl1.Series[0].Points)
            {
                var sr = (SeriesPoint)pt;

                sr.Annotations.Clear();

                foreach (var item in ords)
                {
                    TextAnnotation an = null;
                    if (sr.DateTimeArgument == item.Time && item.Type.ToUpper()=="BUY")
                    {
                        an = sr.Annotations.AddTextAnnotation(sr.ToString(), "BUY");
                        an.TextColor = Color.Green;
                    }else if (sr.DateTimeArgument == item.Time && item.Type.ToUpper() == "SELL")
                    {

                        an = sr.Annotations.AddTextAnnotation(sr.ToString(), "SELL");
                        an.TextColor = Color.Red;
                    }

                    if (pt == chartControl1.Series[0].Points.Last())
                    {
                        
                    }

                }
            }

            


            //MessageBox.Show("All done!");
        }

        
        private void TreeMarkets_FocusedNodeChanged(object sender, DevExpress.XtraTreeList.FocusedNodeChangedEventArgs e)
        {
            
        }

        private void BarBtnNewStrategy_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            //var si = Globals.AddNewStrategyToDB(new StrategyInfo() { Name = "Strategy - New",UserId=Globals.CurrentUser.Id });

            var html = Globals.HTTPPost(Globals.API_ENDPOINT + "api/strategies", new Dictionary<string, string>(){
            {"action","new" },
            {"token",Globals.CurrentUser.GetToken() }
            }
            );

            var res = JsonConvert.DeserializeObject<StrategyInfo>(html);
            if (res == null)
            {
                XtraMessageBox.Show(html);
            }


            RefreshStrategies() ;

        }

        private void TreeStrategies_MouseClick(object sender, MouseEventArgs e)
        {
            if (e.Button == MouseButtons.Right)
            {
                TreeListHitInfo info = treeStrategies.CalcHitInfo(new Point(e.X, e.Y));
                if (info.Node != null)
                {
                    contextMenuStrip1.Show(treeStrategies, new Point(e.X, e.Y));
                }
                
            }
        }
        private void TreeMarkets_CustomDrawNodeCell(object sender, CustomDrawNodeCellEventArgs e)
        {
            /*
            if (e.Column == treeListColumn1)
            {
                var mi = e.Node.Tag as MarketInfo;

                if (mi == null) return;
                if (CurrentSelectedMarket == null) return;

                var OFFSET = 9;

                if (mi.Symbol == CurrentSelectedMarket.Symbol)
                {

                    var color = Color.Salmon;

                    var pointsTopLeft = new PointF[] {
                        new PointF(e.Bounds.X,e.Bounds.Y),
                        new PointF(e.Bounds.X + OFFSET, e.Bounds.Y),
                        new PointF(e.Bounds.X, e.Bounds.Y + OFFSET)
                    };
                    var pointsTopRight = new PointF[] {
                        new PointF(e.Bounds.X + e.Bounds.Width - OFFSET,e.Bounds.Y),
                        new PointF(e.Bounds.X  + e.Bounds.Width, e.Bounds.Y),
                        new PointF(e.Bounds.X + e.Bounds.Width, e.Bounds.Y + OFFSET)
                    };
                    var pointsBottomLeft = new PointF[] {
                        new PointF(e.Bounds.X,e.Bounds.Y + e.Bounds.Height),
                        new PointF(e.Bounds.X + OFFSET, e.Bounds.Y + e.Bounds.Height),
                        new PointF(e.Bounds.X, e.Bounds.Y + e.Bounds.Height - OFFSET)
                    };
                    var pointsBottomRight = new PointF[] {
                        new PointF(e.Bounds.X + e.Bounds.Width,e.Bounds.Y + e.Bounds.Height-OFFSET),
                        new PointF(e.Bounds.X + e.Bounds.Width, e.Bounds.Y + e.Bounds.Height),
                        new PointF(e.Bounds.X + e.Bounds.Width-OFFSET, e.Bounds.Y + e.Bounds.Height)
                    };

                    e.Graphics.FillPolygon(new SolidBrush(color), pointsTopLeft);
                    e.Graphics.FillPolygon(new SolidBrush(color), pointsTopRight);
                    e.Graphics.FillPolygon(new SolidBrush(color), pointsBottomLeft);
                    e.Graphics.FillPolygon(new SolidBrush(color), pointsBottomRight);
                }

            }*/
        }

        private void ActivateStrategy(StrategyInfo si)
        {
            ActiveStrategy = si;
            fctb.Text = ActiveStrategy.Script;
            Globals.ActiveStrategyOptions = si.Options;


            UpdateStrategyListValues();
        }

        private void TreeMarkets_MouseDoubleClick(object sender, MouseEventArgs e)
        {
            if (e.Button != MouseButtons.Left) return;

            TreeListHitInfo info = treeMarkets.CalcHitInfo(treeMarkets.PointToClient(new Point(MousePosition.X, MousePosition.Y)));
            if (info.Node != null)
            {
                ActiveMarket = (MarketInfo)info.Node.Tag;
                barLblCurrentMarket.Caption = "Current Market: <b>" + ActiveMarket.Symbol + "</b>";

                UpdateMarketListValues();
            }
        }


        private void UpdateMarketListValues()
        {
            treeMarkets.NodesIterator.DoOperation((n) => {
                var mInfo = n.Tag as MarketInfo;

                if (mInfo == null) return;

                var temp = GetMarketNodeString(mInfo);
                if (n.GetDisplayText(0) != temp)
                {
                    n.SetValue(0, temp);
                }
            });
        }


        private void UpdateStrategyListValues()
        {
            treeStrategies.NodesIterator.DoOperation((n) => {
                var si = n.Tag as StrategyInfo;

                if (si == null) return;

                var temp = GetStrategyNodeString(si);
                if (n.GetDisplayText(0) != temp)
                {
                    n.SetValue(0, temp);
                }
            });
        }


        private void ContextMenuStrip1_ItemClicked(object sender, ToolStripItemClickedEventArgs e)
        {
            if (treeStrategies.FocusedNode == null) return;

            var si = treeStrategies.FocusedNode.Tag as StrategyInfo;

            if (si == null) return;




            if (e.ClickedItem.Text == "Rename Strategy")
            {
                var value = si.Name;

                if (GlobalHelper.InputBox("Rename Strategy","Rename '" + si.Name + "' to:", ref value) == DialogResult.OK && value!="")
                {

                    si.Name = value;

                    var html = Globals.HTTPPost(Globals.API_ENDPOINT + "api/strategies", new Dictionary<string, string>(){
            {"action","rename" },
            {"token",Globals.CurrentUser.GetToken() },
            {"strategy",JsonConvert.SerializeObject(si) }
            }
            );

                    RefreshStrategies();
                }
            }else if (e.ClickedItem.Text == "Delete Strategy")
            {

                if (MessageBox.Show("Are you sure you want to delete strategy '" + si.Name + "' ?","Confirmation",MessageBoxButtons.YesNo) == DialogResult.Yes)
                {

                    var html = Globals.HTTPPost(Globals.API_ENDPOINT + "api/strategies", new Dictionary<string, string>(){
            {"action","delete" },
            {"token",Globals.CurrentUser.GetToken() },
            {"strategy",JsonConvert.SerializeObject(si) }
            }
            );


                    

                    RefreshStrategies();
                }
            }
        }

        private void TreeStrategies_MouseDoubleClick(object sender, MouseEventArgs e)
        {
            if (e.Button != MouseButtons.Left) return;

            TreeListHitInfo info = treeStrategies.CalcHitInfo(treeStrategies.PointToClient(new Point(MousePosition.X, MousePosition.Y)));
            if (info.Node != null)
            {
                ActivateStrategy(info.Node.Tag as StrategyInfo);
            }
        }

        private void BarSaveStrategy_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            SaveScript();

        }


        void SaveScript()
        {
            if (ActiveStrategy == null) return;

            ActiveStrategy.Script = fctb.Text;
            ActiveStrategy.DateModified = DateTime.Now;
            ActiveStrategy.DateModified = DateTime.Now;
            ActiveStrategy.Options = Globals.ActiveStrategyOptions;

            //Globals.UpdateStrategy(ActiveStrategy);


            var html = Globals.HTTPPost(Globals.API_ENDPOINT + "api/strategies", new Dictionary<string, string>(){
            {"action","update" },
            {"token",Globals.CurrentUser.GetToken() },
            {"strategy",JsonConvert.SerializeObject(ActiveStrategy) }
            }
            );

            var res = JsonConvert.DeserializeObject<StrategyInfo>(html);
            if (res == null)
            {
                XtraMessageBox.Show(html);
            }



            RefreshStrategies();
        }

        private void SimpleButton2_Click(object sender, EventArgs e)
        {
            FirstInit();
        }

        private void BarBtnAbout_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            XtraMessageBox.Show("By Ashot Khachatryan for University of West Attica");
        }

        private void ChartControl1_CustomDrawCrosshair(object sender, CustomDrawCrosshairEventArgs e)
        {
            return;

            // Specify the crosshair argument line color, dash style and thickness. 
            e.CrosshairLineElement.Color = Color.Green;
            e.CrosshairLineElement.LineStyle.DashStyle = DashStyle.DashDot;
            e.CrosshairLineElement.LineStyle.Thickness = 3;

            // Specify the back color for the crosshair argument axis label.  
            foreach (CrosshairAxisLabelElement axisLabelElement in e.CrosshairAxisLabelElements)
                axisLabelElement.BackColor = Color.Blue;

            foreach (CrosshairElementGroup group in e.CrosshairElementGroups)
            {
                CrosshairGroupHeaderElement groupHeaderElement = group.HeaderElement;

                // Specify the text, text color and font for the crosshair group header element.  
                groupHeaderElement.Text = "Custom draw";
                groupHeaderElement.TextColor = Color.Green;
                groupHeaderElement.Font = new Font(this.Font, FontStyle.Bold);

                // Obtain a crosshair element for the first series. 
                CrosshairElement element = group.CrosshairElements[0];

                // Specify the color, dash style and thickness for the crosshair value lines.  
                element.LineElement.Color = Color.DarkViolet;
                element.LineElement.LineStyle.DashStyle = DashStyle.Dash;
                element.LineElement.LineStyle.Thickness = 2;

                // Specify the text color and back color for the crosshair value labels. 
                element.AxisLabelElement.TextColor = Color.Red;
                element.AxisLabelElement.BackColor = Color.Yellow;

                // Format the text shown for the series in the crosshair cursor label. Specify the text color and marker size.  
                element.LabelElement.TextColor = Color.Red;
                element.LabelElement.MarkerSize = new Size(15, 15);
                element.LabelElement.Text = string.Format("{0}: A={1}; V={2}", element.Series.Name, element.SeriesPoint.Argument, element.SeriesPoint.Values[0]);
            }
        
        }

        private void BarBtnStrategyOptions_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            var f = new StrategyOptionsForm();
            f.ShowDialog();
        }

        private void BarBtnUser_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            var f = new UserSettingsForm();
            f.ShowDialog();
        }

        private void DockChart_CustomButtonUnchecked(object sender, DevExpress.XtraBars.Docking2010.ButtonEventArgs e)
        {
            DockChart_CustomButtonClick(sender, e);
            var btn = (CustomHeaderButton)dockChart.CustomHeaderButtons[0];
            btn.Enabled = true;
        }

        private void DockChart_CustomButtonChecked(object sender, DevExpress.XtraBars.Docking2010.ButtonEventArgs e)
        {
            DockChart_CustomButtonClick(sender, e);
            var btn = (CustomHeaderButton)dockChart.CustomHeaderButtons[0];
            btn.Enabled = false;
            
        }
        private void ContextMenuEditor_Opening(object sender, CancelEventArgs e)
        {
            cutToolStripMenuItem.Enabled = !fctb.Selection.IsEmpty;
            copyToolStripMenuItem.Enabled = !fctb.Selection.IsEmpty;
            pasteToolStripMenuItem.Enabled = Clipboard.GetText() != "";
            deleteToolStripMenuItem.Enabled = !fctb.Selection.IsEmpty;
        }

        private void CopyToolStripMenuItem_Click(object sender, EventArgs e)
        {
            fctb.Copy();
        }

        private void PasteToolStripMenuItem_Click(object sender, EventArgs e)
        {
            fctb.Paste();
        }

        private void DeleteToolStripMenuItem_Click(object sender, EventArgs e)
        {
            fctb.SelectedText = "";
        }

        private void CutToolStripMenuItem_Click(object sender, EventArgs e)
        {
            fctb.Cut();
        }

        private void Fctb_TextChangedDelayed(object sender, TextChangedEventArgs e)
        {
            var scriptOK = false;

            if (CurrentCandles == null || CurrentCandles.Count < 50)
            {
                scriptOK = false;
            }
            else
            {
                var temp = new Context(CurrentCandles);
                temp.ActiveStrategyOptions = Globals.ActiveStrategyOptions;

                var t = Task.Factory.StartNew(() =>
                {
                    //Thread.Sleep(2200);
                    if ((DateTime.Now - LastTextChange).TotalSeconds > 2)
                    {
                        // all good?
                        LastTextChange = DateTime.Now;
                    }
                    else
                    {
                        //return;
                    }
                    var tmp = Globals.TestScript(fctb.Text, ref temp);

                    if (tmp=="")
                    {
                        scriptOK = true;
                        txtErrors.UpdateThreadSafe(() => { txtErrors.Text = "No errors!"; });
                        
                    }
                    else
                    {
                        txtErrors.UpdateThreadSafe(() => { txtErrors.Text = tmp; });

                    }

                    ribbonControl1.UpdateThreadSafe(() => { barBtnBacktest.Enabled = scriptOK; });

                });

            }
        }

        private void RibbonStatusBar1_Click(object sender, EventArgs e)
        {

        }

        private void BtBtnShowErrorPanel_DownChanged(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            dockErrors.Visibility = (btBtnShowErrorPanel.Down) ? DockVisibility.Visible : DockVisibility.Hidden;
        }

        private void DockResults_CustomButtonClick(object sender, DevExpress.XtraBars.Docking2010.ButtonEventArgs e)
        {
            SaveFileDialog sfd = new SaveFileDialog();
            sfd.Filter = "CSV Files | *.csv";

            if (sfd.ShowDialog() == DialogResult.OK)
            {
                orderControl1.treeOrders.ExportToCsv(sfd.FileName);
            }

        }
    }


}



